let s:vimrcdir = fnamemodify(resolve(expand('<sfile>:p')), ':h')
let &rtp = "$HOME/.vim,".s:vimrcdir ."/vim,$VIM/vimfiles,$VIMRUNTIME"

execute "set rtp+=".s:vimrcdir."/vim/after"
set rtp+=$VIM/vimfiles/after,$HOME/.vim/after,~/.local/share/nvim/site/after,~/.config/nvim/after

" Node of the global env is changed based on mmsx version etc. which can
" break some plugins if old node is used.
let $PATH = expand('$HOME/.asdf/installs/nodejs/24.0.2/bin:').$PATH

if has('nvim')
    " Some plugins, such as UltiSnip, require this. The nvim python plugin
    " must be installed first in the following virtual env.
    let g:python3_host_prog = '$HOME/.venvs/nvim/bin/python3'
endif

let s:use_ale = 1

" Plugins
let plug_dir = '~/.vim/plugged'
if has('nvim')
  let plug_dir = stdpath('data') . '/plugged'
end

call plug#begin(plug_dir)

Plug 'vim-airline/vim-airline'
Plug 'jlanzarotta/bufexplorer'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/a.vim'
Plug 'vim-scripts/LargeFile'
Plug 'terryma/vim-expand-region'
Plug 'airblade/vim-gitgutter'
Plug 'leafgarland/typescript-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'rust-lang/rust.vim'
Plug 'pangloss/vim-javascript'
Plug 'cespare/vim-toml'
Plug 'mbbill/undotree'

if has('nvim')
    Plug 'projekt0n/github-nvim-theme' " colorscheme

    " It is important to use tagged release otherwise no binaries
    " are available (binary is used for the fuzzy finder)
    Plug 'Saghen/blink.cmp', { 'tag': '*' }
    Plug 'quangnguyen30192/cmp-nvim-ultisnips'
    Plug 'Saghen/blink.compat'

    Plug 'williamboman/mason.nvim' " to install LSP servers
    Plug 'neovim/nvim-lspconfig' " config for LSP servers
    if s:use_ale
        Plug 'dense-analysis/ale'
        " Plug 'ycm-core/YouCompleteMe', { 'do': '/usr/bin/python3 ./install.py --clang-completer' }
    endif

    Plug 'nvim-lua/plenary.nvim' " minuet dependency
    Plug 'milanglacier/minuet-ai.nvim' " AI autocompletion
    Plug 'olimorris/codecompanion.nvim'

    Plug 'rachartier/tiny-inline-diagnostic.nvim'

    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'

    " List of errors, bottom of screen
    Plug 'folke/trouble.nvim'

    " File explorer
    Plug 'stevearc/oil.nvim'

    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate', 'branch': 'master'}
else
    Plug 'ycm-core/YouCompleteMe', { 'do': '/usr/bin/python3 ./install.py --clang-completer' }
    Plug 'dense-analysis/ale'
endif

call plug#end()

if has('nvim')
    " in /config directory is the configurations for neovim plugins
    lua require('plugins/blink')
    lua require('plugins/minuet')
    lua require('plugins/lspconfig')
    lua require('plugins/tiny-inline-diagnostic')
    lua require('plugins/telescope')
    lua require('plugins/trouble')
    lua require('plugins/oil')
    lua require('plugins/treesitter')
    lua require('plugins/codecompanion')
endif

" {{{ Various options

filetype plugin on
filetype plugin indent on

syntax on
set encoding=utf-8
set nocompatible
set backspace=indent,eol,start

set incsearch
set hlsearch

set autoindent
set hidden
if !has('nvim')
    set esckeys
end
set listchars=eol:\ ,tab:>-,trail:-,extends:>,precedes:<,nbsp:¤
set list
set formatoptions=tcroqn

set ruler
set modeline
set modelines=5
set foldmethod=marker
set lazyredraw

set report=0
set laststatus=2
set foldmethod=marker

set spell
set spelllang=en

set number

" Restore cursor position
au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

" Syntax highlighting for LESS files
au BufRead,BufNewFile *.less setfiletype css

" Undo and tags
set cpoptions-=C
set tags=tags;/,.tags;/,TAG;/
if version >= 703
    set directory=~/.cache/vim/swap/
    set undofile                          " to activate undofile feature
    set undodir=~/.cache/vim/undo,.       " to store undo files in same a specific dir
    au BufWritePre tmp* setl noundofile   " to ignore file into /tmp
endif

" Compilation
set makeprg=LC_ALL=C\ make\ MONOCHROME=1
set grepprg=git\ grep\ -H\ -n

" Patch errorformat to properly catch filenames in Z output
set errorformat^=:%*[\ ]%f:%l:\ %m

" Code formatting
set tabstop=4
set softtabstop=4
set expandtab
set textwidth=78
set shiftwidth=4

set cinoptions=
set cinoptions+=:0             " Align case labels on previous indent levels
set cinoptions+=g0             " same for C++ stuff
set cinoptions+=t0             " type on the line before the function is not indented
set cinoptions+=(0,Ws          " indent in functions ( ... ) when it breaks
set cinoptions+=m1             " align the closing ) properly
set cinoptions+=j1             " java/javascript -> fixes blocks
set cinoptions+=l1s            " align code after label ignoring braces.

" Doxygen
au! Syntax {cpp,c,d,javascript}
au Syntax {cpp,c,d,javascript} runtime syntax/doxygen.vim
let g:doxygen_end_punctuation='[.?!]'

" }}}
" {{{ Mapping

" change leader
let mapleader = ","

" change directory to the file being edited
nnoremap ,cd :cd %:p:h<CR>

" forbid non-breakable spaces
imap   <Space>

" next compilation error
map +        :cnext<cr>
map <kPlus>  :cnext<CR>
" previous compilation error
map -        :cprev<cr>
map <kMinus> :cprev<CR>
" next syntastic error
map <S-Right> :lnext<cr>
" previous syntastic error
map <S-Left> :lprev<cr>

" follow tag
map <F2> <C-]>

" bufExplorer
map <F3> :BufExplorer<cr>

" grep on the current word
map <F4> :gr! -w <cword><cr>

if !has('nvim')
  " Not useful on nvim which automatically sets paste mode when pasting
  set pastetoggle=<F5>
end

nnoremap <F6> :nohlsearch<CR>

" spell check
map <F8> :setlocal spell! spelllang=en_us<CR>

" horizontal split + next buffer
map <F9> :split<cr>:bn<cr>
" vertical split + next buffer
map <F10> :vsplit<cr>:bn<cr>

" make
noremap  <F11> :make!<cr><cr>
inoremap <F11> <esc>:make!<cr><cr>

" remove trailing spaces
map <F12> mcHmh:%s/ \+$//ge<cr>'hzt`c

" move to left buffer
map  <C-Left>   <C-w><Left>
map! <C-Left>   <Esc> <C-w><Left>
" move to right buffer
map  <C-Right>  <C-w><Right>
map! <C-Right>  <Esc> <C-w><Right>
" move to buffer above
map  <C-Up>     <C-w><Up>
map! <C-Up>     <Esc> <C-w><Up>
" move to buffer below
map  <C-Down>   <C-w><Down>
map! <C-Down>   <Esc> <C-w><Down>

" scroll up
map <S-Up> <C-Y>
" scroll down
map <S-Down> <C-E>

" mouse
set mouse+=a
if !has('nvim')
    if has("mouse_sgr")
        set ttymouse=sgr
    else
        set ttymouse=xterm2
    end
end

" better grep
command! -nargs=+ Ggr execute "Ggrep! -q --recurse-submodules" <q-args>
map <F4> :Ggr <cword><cr>

" close current buffer and move to next
command! WW bp|bd #
nmap <C-b> :WW<CR>

" use x11 copy buffer
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" file completion
set wildmode=longest,list,full
set wildmenu
set completeopt-=preview

" jump at end of paste
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" vp doesn't replace paste buffer
function! RestoreRegister()
    if has('unnamedplus')
        let @+ = s:restore_reg
    else
        let @" = s:restore_reg
    endif
    return ''
endfunction
function! s:Repl()
    if has('unnamedplus')
        let s:restore_reg = @+
    else
        let s:restore_reg = @"
    endif
    return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" quick select pasted text
noremap gV `[v`]

" Sudo write with 'w!!'
cabbr w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Add Gblame abbreviation
cabbr Gblame Git blame

" }}}
" {{{ Plugins options

" Overlength
if version >= 703
    set cc=+1
    hi ColorColumn cterm=none ctermfg=none ctermbg=darkgray
else
    au FileType c,cpp match OverLength /\%79v.\+/
    hi OverLength cterm=none ctermfg=none ctermbg=darkblue
endif

" Local vimrc

let g:localvimrc_name = ['.lvimrc', '.local_vimrc.vim']
let g:localvimrc_persistent = 2
let g:localvimrc_event = [ "BufWinEnter", "BufRead" ]

" disable sandboxing (the option makeprg that we set in waf localvimrcs cannot
" be set in a sandbox)
let g:localvimrc_sandbox = 0

" Whitelist ~/dev, which must contains all our repositories
let g:localvimrc_whitelist = $HOME.'/dev/'

" Ale

if !has('nvim')
    let g:ale_open_list = 1
endif
let g:airline#extensions#ale#enabled = 1
let g:ale_set_balloons = 0
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_completion_enabled = 0
let g:ale_python_auto_pipenv = 0
let g:ale_python_auto_poetry = 1
let g:ale_c_parse_compile_commands = 1

highlight link ALEWarningSign String
highlight link ALEErrorSign Title

let g:ale_linters = {
\   'c': ['cc'],
\   'python': ['pylint', 'mypy', 'ruff'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint', 'tsserver', 'typecheck'],
\   'typescriptreact': ['eslint', 'tsserver', 'typecheck']
\}

let g:ale_rust_rustc_options = '-o /dev/null'

let g:ale_lsp_show_message_severity = 'information'
let g:ale_c_clangd_options = '--background-index -j4 -header-insertion-decorators=0 -limit-results=20 --pch-storage=disk'
"let g:ale_command_wrapper = '~/.local/bin/ale-command-wrapper.sh'

" YCM
let g:ycm_show_diagnostics_ui = 0
let g:ycm_confirm_extra_conf = 0
let g:ycm_register_as_syntastic_checker = 0
let g:ycm_global_ycm_extra_conf = s:vimrcdir.'/../conf/ycm_default_conf.py'

let g:ycm_use_clangd = 1
let g:ycm_clangd_args = ['--background-index', '-j4', '-header-insertion-decorators=0', '-limit-results=20', '--pch-storage=disk']
let g:ycm_clangd_binary_path = 'clangd'

" a.vim
let g:alternateRelativeFiles   = 1
let g:alternateExtensions_blk  = "h"
let g:alternateExtensions_blkk = "h"
let g:alternateExtensions_h    = "c,cpp,cxx,cc,CC,blk,blkk"

" fzf
" remap Ctrl-p on files referenced by Git
nmap <C-p> :GFiles<CR>

" Expand region
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Tmux
if &term =~ '^screen'
    if !has('nvim')
        " tmux knows the extended mouse mode
        set ttymouse=sgr
    endif
    " tmux will send xterm-style keys when xterm-keys is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Bufexplorer
let g:bufExplorerFindActive = 0
let g:bufExplorerSplitOutPathName = 1
let g:bufExplorerShowRelativePath = 1
let g:bufExplorerSortBy = 'mru'

" }}}
" {{{ Colors

if has('nvim')
    colorscheme github_dark_default
else
    set background=light
    hi Comment      cterm=none       ctermfg=blue       ctermbg=none
    hi doxygenBrief cterm=none       ctermfg=cyan       ctermbg=none
    hi Folded       cterm=none       ctermfg=brown      ctermbg=none

    hi Visual       cterm=reverse    ctermfg=none       ctermbg=none
    hi Search       cterm=none       ctermfg=black      ctermbg=lightblue
    hi IncSearch    cterm=underline  ctermfg=white      ctermbg=darkblue

    hi StatusLine   cterm=none       ctermfg=white      ctermbg=blue
    hi StatusLineNc cterm=none       ctermfg=black      ctermbg=white
    hi WildMenu     cterm=none       ctermfg=white      ctermbg=none
    hi VertSplit    cterm=none       ctermfg=darkgray   ctermbg=none
    hi NonText      cterm=none       ctermfg=darkgray   ctermbg=none

    hi MatchParen   cterm=underline  ctermfg=none       ctermbg=none
    hi Pmenu        cterm=none       ctermfg=white      ctermbg=darkgray
    hi PmenuSel     cterm=none       ctermfg=white      ctermbg=gray
    hi PmenuSbar    cterm=none       ctermfg=blue       ctermbg=blue
    hi PmenuThumb   cterm=none       ctermfg=gray       ctermbg=gray

    hi SpellBad     cterm=underline  ctermfg=lightred   ctermbg=none
    hi SpellCap     cterm=none       ctermfg=lightred   ctermbg=none
    hi SpellLocal   cterm=underline  ctermfg=darkgreen  ctermbg=none
    hi SpellRare    cterm=none       ctermfg=none       ctermbg=none

    hi javaScriptTpl     cterm=none  ctermfg=darkgreen  ctermbg=none
    hi javaScriptTplMark cterm=none  ctermfg=magenta    ctermbg=none

    hi DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    hi DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    hi DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    hi DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
endif

" }}}

if has("nvim")
    lua require('mappings')
end
